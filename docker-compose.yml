services:
  tls:
    profiles:
      - setup
    build:
      context: tls/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    user: root  # ensures we can write to the local tls/ directory.
    init: true
    volumes:
      - ./tls/entrypoint.sh:/entrypoint.sh
      - ./tls/instances.yml:/usr/share/elasticsearch/tls/instances.yml
      - ./tls/certs:/usr/share/elasticsearch/tls/certs

  setup:
    profiles:
      - setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh
      - ./setup/lib.sh:/lib.sh
      - ./setup/roles:/roles
      - ./tls/certs/ca/ca.crt:/ca.crt
    network_mode: service:elasticsearch
    depends_on:
      elasticsearch:
        condition: service_healthy

  # The 'kibana-genkeys' service runs a one-off command which generates and
  # prints encryption keys for Kibana.
  #
  # By default, it is excluded from the services started by 'docker compose up'
  # due to the non-default profile it belongs to. To run it, either provide the
  # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
  # such as 'docker compose up kibana-genkeys'.
  kibana-genkeys:
    profiles:
      - setup
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    command:
      - bin/kibana-encryption-keys
      - generate
    network_mode: none

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    restart: unless-stopped
    ports:
      - ${ELASTIC_PORT}:${ELASTIC_PORT}
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/docs/deploy-manage/deploy/self-managed/bootstrap-checks
      discovery.type: single-node
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
      - elasticsearch:/usr/share/elasticsearch/data
      - ./tls/certs/ca/ca.crt:/usr/share/elasticsearch/config/ca.crt
      - ./tls/certs/elasticsearch/elasticsearch.crt:/usr/share/elasticsearch/config/elasticsearch.crt
      - ./tls/certs/elasticsearch/elasticsearch.key:/usr/share/elasticsearch/config/elasticsearch.key
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-k", "-u", "elastic:${ELASTIC_PASSWORD}", "https://localhost:${ELASTIC_PORT}/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 15s
      timeout: 10s
      retries: 10

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELASTIC_VERSION}
    restart: unless-stopped
    ports:
      - ${KIBANA_PORT}:${KIBANA_PORT}
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD}
      ELASTIC_PORT: ${ELASTIC_PORT}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
      - ./tls/certs/ca/ca.crt:/usr/share/kibana/config/ca.crt
      - ./tls/certs/kibana/kibana.crt:/usr/share/kibana/config/kibana.crt
      - ./tls/certs/kibana/kibana.key:/usr/share/kibana/config/kibana.key
    networks:
      - monitoring
    depends_on:
      elasticsearch:
        condition: service_healthy

  jaeger:
    image: jaegertracing/all-in-one:1.72.0
    restart: unless-stopped
    ports:
      - "${JAEGER_UI_PORT}:${JAEGER_UI_PORT}"
      - "14250:14250" # gRPC
      - "14268:14268" # HTTP
    environment:
      # Используем Elasticsearch как хранилище для трейсов
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=https://elasticsearch:9200
      - ES_USERNAME=elastic
      - ES_PASSWORD=${ELASTIC_PASSWORD}
      - ES_TLS_ENABLED=true
      - ES_TLS_CA=/etc/jaeger/ca.crt
    volumes:
      - ./tls/certs/ca/ca.crt:/etc/jaeger/ca.crt
    networks:
      - monitoring
    depends_on:
      elasticsearch:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:v3.5.0
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_UI_PORT}:${PROMETHEUS_UI_PORT}"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.config.file=/etc/prometheus/web.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-otlp-receiver'
    environment:
      PROMETHEUS_USER: ${PROMETHEUS_USER}
      PROMETHEUS_PASSWORD: ${PROMETHEUS_PASSWORD}
      PROMETHEUS_UI_PORT: ${PROMETHEUS_UI_PORT}
    volumes:
      - ./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/config/prometheus.web.yml:/etc/prometheus/web.yml
      - prometheus_data:/prometheus
      - ./tls/certs/ca/ca.crt:/etc/prometheus/ca.crt
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512m

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.133.0
    restart: unless-stopped
    ports:
      - "4317:4317"  # OTLP RPC
      - "4318:4318"  # OTLP HTTP
    command:
      - '--config=/etc/otelcol-contrib/config.yml'
    environment:
      OTEL_USERNAME: ${OTEL_USERNAME}
      OTEL_PASSWORD: ${OTEL_PASSWORD}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    volumes:
      - ./otel-collector/config/otel-collector.yml:/etc/otelcol-contrib/config.yml
      - ./tls/certs/ca/ca.crt:/etc/otelcol-contrib/ca.crt
    networks:
      - monitoring
    depends_on:
      jaeger:
        condition: service_started
      elasticsearch:
        condition: service_healthy

  grafana:
    image: grafana/grafana-oss:12.2.0-17142428006
    restart: unless-stopped
    ports:
      - "${GRAFANA_UI_PORT}:${GRAFANA_UI_PORT}"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SERVER_PROTOCOL: https
      GF_SERVER_CERT_FILE: /etc/grafana/grafana.crt
      GF_SERVER_CERT_KEY: /etc/grafana/grafana.key
      PROMETHEUS_USER: ${PROMETHEUS_USER}
      PROMETHEUS_PASSWORD: ${PROMETHEUS_PASSWORD}
      PROMETHEUS_UI_PORT: ${PROMETHEUS_UI_PORT}
      JAEGER_UI_PORT: ${JAEGER_UI_PORT}
    volumes:
      - ./grafana/config:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana
      - ./tls/certs/grafana/grafana.crt:/etc/grafana/grafana.crt
      - ./tls/certs/grafana/grafana.key:/etc/grafana/grafana.key
    networks:
      - monitoring
    depends_on:
      - prometheus
      - jaeger


networks:
  monitoring:
    driver: bridge

volumes:
  elasticsearch:
  prometheus_data:
  grafana_data:
