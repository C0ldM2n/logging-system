services:
  setup:
    profiles:
      - setup
    build:
      context: setup/
      args:
        ES_VERSION: ${ES_VERSION}
    init: true
    environment:
      ES_HOST: ${ES_HOST}
      ES_PORT: ${ES_PORT}
      ES_URL: https://${ES_HOST}:${ES_PORT}
      ES_PASSWORD: ${ES_PASSWORD}

      OTEL_WRITER_PASSWORD: ${OTEL_WRITER_PASSWORD}

      ES_CA_CERT: /tls/certs/ca/ca.crt
    volumes:
      - ./setup/roles:/roles
      - ./setup/lib.sh:/lib.sh
      - ./setup/entrypoint.sh:/entrypoint.sh

      - ./tls/certs/ca/ca.crt:/ca.crt
      - ./tls/certs:/usr/share/elasticsearch/tls/certs

      - ./tls/instances.yml:/usr/share/elasticsearch/tls/instances.yml
    network_mode: service:elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_VERSION}
    restart: unless-stopped
    ports:
      - "${ES_PORT}:9200"
    environment:
      node.name: elasticsearch
      discovery.type: single-node

      ES_JAVA_OPTS: -Xms512m -Xmx512m
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data

      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml

      - ./tls/certs/ca/ca.crt:/usr/share/elasticsearch/config/ca.crt
      - ./tls/certs/elasticsearch/elasticsearch.crt:/usr/share/elasticsearch/config/elasticsearch.crt
      - ./tls/certs/elasticsearch/elasticsearch.key:/usr/share/elasticsearch/config/elasticsearch.key
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "curl", "-k", "-u", "elastic:${ES_PASSWORD}", "https://localhost:${ES_PORT}/_cluster/health?wait_for_status=yellow&timeout=5s"]
      interval: 15s
      timeout: 10s
      retries: 10

  jaeger:
    image: jaegertracing/all-in-one:1.72.0
    restart: unless-stopped
    ports:
      - "${JAEGER_UI_PORT}:16686"
    environment:
      SPAN_STORAGE_TYPE: elasticsearch
      COLLECTOR_OTLP_ENABLED: "true"

      ES_SERVER_URLS: https://${ES_HOST}:${ES_PORT}
      ES_USERNAME: elastic
      ES_PASSWORD: ${ES_PASSWORD}

      ES_TLS_ENABLED: true
      ES_TLS_CA: /etc/jaeger/ca.crt
    volumes:
      - ./tls/certs/ca/ca.crt:/etc/jaeger/ca.crt
    networks:
      - monitoring
    depends_on:
      elasticsearch:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:v3.5.0
    restart: unless-stopped
    command:
      - "--storage.tsdb.path=/prometheus"
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - prometheus_data:/prometheus

      - ./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml

      - ./tls/certs/ca/ca.crt:/etc/prometheus/ca.crt
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512m

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.133.0
    restart: unless-stopped
    ports:
      - "4317:4317"
      - "4318:4318"
    command:
      - '--config=/etc/otelcol-contrib/config.yml'
    environment:
      OTEL_USERNAME: ${OTEL_USERNAME}
      OTEL_PASSWORD: ${OTEL_PASSWORD}

      ES_PASSWORD: ${ES_PASSWORD}
      ES_URL: https://${ES_HOST}:${ES_PORT}
    volumes:
      - ./otel-collector/config/otel-collector.yml:/etc/otelcol-contrib/config.yml

      - ./tls/certs/ca/ca.crt:/etc/otelcol-contrib/ca.crt
    networks:
      - monitoring
    depends_on:
      jaeger:
        condition: service_started
      elasticsearch:
        condition: service_healthy

  grafana:
    image: grafana/grafana-oss:12.2.0-17142428006
    restart: unless-stopped
    ports:
      - "${GRAFANA_UI_PORT}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana

      - ./grafana/config/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/config/provisioning:/etc/grafana/provisioning

      - ./tls/certs/grafana/grafana.crt:/etc/grafana/grafana.crt
      - ./tls/certs/grafana/grafana.key:/etc/grafana/grafana.key
    networks:
      - monitoring
    depends_on:
      - prometheus
      - jaeger


networks:
  monitoring:
    driver: bridge

volumes:
  elasticsearch:
  prometheus_data:
  grafana_data:
